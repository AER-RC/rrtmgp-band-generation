#!/bin/csh -f

# Parameter 1: Directory
# Parameter 2: extension

\cp input_param $1/input_param_$2
\cp input_param $1/input_param

cd $1

ln -s ../lbl_f90/TAPE3 .

if ( -e "tape5-T03-n01") then
    @ jl=1
else
    @ jl=9	
endif

while ($jl < 10)
    @ i = 3
    set tape5od = tape5-T0${i}-n0${jl} 
    echo ${tape5od}
    \cp ${tape5od} TAPE5
    lblrtm_f90
    set kgfile = KG_bbp1_n0${jl}
    echo " &igaspar igas_on=1/" > tmp
    cat input_param tmp > input_param_planck
    kdis_2sort_planck < input_param_planck 
    \mv -f CK_ABS_PL.DAT ${kgfile}		
    \rm tmp
    \rm input_param_planck
    @ jl++
end

if ( -e "tape5-T08-n01") then
    @ ju=1
else
    @ ju=9
endif

while ($ju < 10)
@ i=8
set tape5od = tape5-T0${i}-n0${ju} 
\cp ${tape5od} TAPE5
echo ${tape5od}
lblrtm_f90
set kgfile = KG_bbp2_n0${ju}
echo " &igaspar igas_on=2/" > tmp
cat input_param tmp > input_param_planck
kdis_2sort_planck < input_param_planck 
\mv -f CK_ABS_PL.DAT ${kgfile}		
\rm tmp 
\rm input_param_planck
@ ju +=2
end

write_data_planck < input_param

\cp kg_planck.f kg_planck_$2.f
\cp kg_planck.f src_arrtm_$1/.

#Generate the necessary Planck information to be used as
#input to ARRTM. This information is compiled into a file
#called block_planck which is then transfered into ARRTM
#program ASETCOEF.F

echo 'Generating Planck functions for band'
planck_int < input_param

\cp avplank_01.f av_plank_01_$2.f
\cp avplank_01.f src_arrtm_$1/.

#Remove all excess files from the band directory before
#leaving it.
\rm OD*
\rm NC*
\rm TAPE3
\rm TAPE9
\rm TAPE10
\rm TAPE11
\rm TAPE12

#Now go to the ARRTM directory and run the code to
#calculate the fluxes in your band.

cd src_arrtm_$1

\rm k_g.o
\rm asetcoef.o

echo 'Compiling new ARRTM source code'
make -f make_arrtm_f90

cd ..

echo 'Running ARRTM for MLS'
\cp -p src_arrtm_$1/arrtm arrtm_$2
\cp INPUT_RRTM_MLS INPUT_RRTM

arrtm_$2 < input_param 

#After generating the information for your band, copy it
#to the band directory for safekeeping.
\cp OUTPUT_RRTM OUTPUT_ARRTM_MLS_$2

#SAW comparison
\cp INPUT_RRTM_SAW INPUT_RRTM
arrtm_$2 < input_param
\cp OUTPUT_RRTM OUTPUT_ARRTM_SAW_$2

#TRP comparison
\cp INPUT_RRTM_TRP INPUT_RRTM
arrtm_$2 < input_param
\cp OUTPUT_RRTM OUTPUT_ARRTM_TRP_$2


echo Finished












